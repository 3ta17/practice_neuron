{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "164571b5-d83c-4b90-b50c-7fd6b224469e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import datasets\n",
    "\n",
    "iris = datasets.load_iris()\n",
    "iris_data = iris.data\n",
    "sl_data = iris_data[:100, 0].copy()\n",
    "\n",
    "# Mean to 0\n",
    "sl_ave = np.average(sl_data)  # Mean Value\n",
    "sl_data -= sl_ave  \n",
    "sw_ave = np.average(sw_data)\n",
    "sw_data -= sw_ave\n",
    "\n",
    "# Store inputs in a list\n",
    "input_data = []\n",
    "for i in range(100):  # 0-99 in the i\n",
    "    input_data.append([sl_data[i], sw_data[i]])\n",
    "\n",
    "# Sigmoid function\n",
    "def sigmoid(x):\n",
    "    return 1.0 / (1.0 + np.exp(-x))\n",
    "\n",
    "# Neurons\n",
    "class Neuron:\n",
    "    def __init__(self):  # initial set up\n",
    "        self.input_sum = 0.0\n",
    "        self.output = 0.0\n",
    "\n",
    "    def set_input(self, inp):\n",
    "        self.input_sum += inp\n",
    "\n",
    "    def get_output(self):\n",
    "        self.output = sigmoid(self.input_sum)\n",
    "        return self.output\n",
    "\n",
    "    def reset(self):\n",
    "        self.input_sum = 0\n",
    "        self.output = 0\n",
    "\n",
    "# Neural network\n",
    "class NeuralNetwork:\n",
    "    def __init__(self):  # initial set up\n",
    "        # weight\n",
    "        self.w_im = [[4.0, 4.0], [4.0, 4.0]]  \n",
    "        self.w_mo = [[1.0, -1.0]]  \n",
    "        \n",
    "        # bias\n",
    "        self.b_m = [2.0, -2.0]\n",
    "        self.b_o = [-0.5]  \n",
    "\n",
    "        # Declaration of each layer\n",
    "        self.input_layer = [0.0, 0.0]\n",
    "        self.middle_layer = [Neuron(), Neuron()]\n",
    "        self.output_layer = [Neuron()]\n",
    "\n",
    "    def commit(self, input_data):  # result\n",
    "        # Reset each layer\n",
    "        self.input_layer[0] = input_data[0]   # Input layer only receives values\n",
    "        self.input_layer[1] = input_data[1]\n",
    "        self.middle_layer[0].reset()\n",
    "        self.middle_layer[1].reset()\n",
    "        self.output_layer[0].reset()\n",
    "\n",
    "        # Input layer → middle layer\n",
    "        self.middle_layer[0].set_input(self.input_layer[0] * self.w_im[0][0])\n",
    "        self.middle_layer[0].set_input(self.input_layer[1] * self.w_im[0][1])\n",
    "        self.middle_layer[0].set_input(self.b_m[0])\n",
    "\n",
    "        self.middle_layer[1].set_input(self.input_layer[0] * self.w_im[1][0])\n",
    "        self.middle_layer[1].set_input(self.input_layer[1] * self.w_im[1][1])\n",
    "        self.middle_layer[1].set_input(self.b_m[1])\n",
    "\n",
    "        # Intermediate layer → output layer\n",
    "        self.output_layer[0].set_input(self.middle_layer[0].get_output() * self.w_mo[0][0])\n",
    "        self.output_layer[0].set_input(self.middle_layer[1].get_output() * self.w_mo[0][1])\n",
    "        self.output_layer[0].set_input(self.b_o[0])\n",
    "\n",
    "        return self.output_layer[0].get_output()\n",
    "\n",
    "# Instances of neural networks\n",
    "neural_network = NeuralNetwork()\n",
    "\n",
    "# result\n",
    "st_predicted = [[], []]  # Setosa\n",
    "vc_predicted = [[], []]  # Versicolor\n",
    "for data in input_data:\n",
    "    if neural_network.commit(data) < 0.5:\n",
    "        st_predicted[0].append(data[0]+sl_ave)\n",
    "        st_predicted[1].append(data[1]+sw_ave)\n",
    "    else:\n",
    "        vc_predicted[0].append(data[0]+sl_ave)\n",
    "        vc_predicted[1].append(data[1]+sw_ave)\n",
    "\n",
    "#  Graphical display of classification results\n",
    "plt.scatter(st_predicted[0], st_predicted[1], label=\"Setosa\")\n",
    "plt.scatter(vc_predicted[0], vc_predicted[1], label=\"Versicolor\")\n",
    "plt.legend()\n",
    "\n",
    "plt.xlabel(\"Sepal length (cm)\")\n",
    "plt.ylabel(\"Sepal width (cm)\")\n",
    "plt.title(\"Predicted\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "13e756a9-2a95-4e2a-9db7-ea4cc29335bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------- Before train --------\n",
      "[[4.0, 4.0], [4.0, 4.0]]\n",
      "[[1.0, -1.0]]\n",
      "[2.0, -2.0]\n",
      "[-0.5]\n",
      "-------- After train --------\n",
      "[[4.0, 4.0], [4.0, 4.0]]\n",
      "[[0.9628174102667754, -1.0055134242038597]]\n",
      "[2.0, -2.0]\n",
      "[-0.541645676531177]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import datasets\n",
    "import random\n",
    "\n",
    "iris = datasets.load_iris()\n",
    "iris_data = iris.data\n",
    "sl_data = iris_data[:100, 0].copy() \n",
    "sw_data = iris_data[:100, 1].copy()  \n",
    "\n",
    "\n",
    "sl_ave = np.average(sl_data)  \n",
    "sl_data -= sl_ave \n",
    "sw_ave = np.average(sw_data)\n",
    "sw_data -= sw_ave\n",
    "\n",
    "\n",
    "train_data = []\n",
    "for i in range(100): \n",
    "    correct = iris.target[i]\n",
    "    train_data.append([sl_data[i], sw_data[i], correct])\n",
    "\n",
    "# Sigmoid function\n",
    "def sigmoid(x):\n",
    "    return 1.0 / (1.0 + np.exp(-x))\n",
    "\n",
    "# Neuron\n",
    "class Neuron:\n",
    "    def __init__(self):  # Initial settings\n",
    "        self.input_sum = 0.0\n",
    "        self.output = 0.0\n",
    "\n",
    "    def set_input(self, inp):\n",
    "        self.input_sum += inp\n",
    "\n",
    "    def get_output(self):\n",
    "        self.output = sigmoid(self.input_sum)\n",
    "        return self.output\n",
    "\n",
    "    def reset(self):\n",
    "        self.input_sum = 0\n",
    "        self.output = 0\n",
    "\n",
    "# Neural network\n",
    "class NeuralNetwork:\n",
    "    def __init__(self):  # Initial settings\n",
    "        # Weights\n",
    "        self.w_im = [[4.0, 4.0], [4.0, 4.0]]  \n",
    "        self.w_mo = [[1.0, -1.0]]  \n",
    "\n",
    "        # Biases\n",
    "        self.b_m = [2.0, -2.0]  \n",
    "        self.b_o = [-0.5] \n",
    "\n",
    "        # Declare each layer\n",
    "        self.input_layer = [0.0, 0.0]\n",
    "        self.middle_layer = [Neuron(), Neuron()]\n",
    "        self.output_layer = [Neuron()]\n",
    "\n",
    "    def commit(self, input_data):  # Execute\n",
    "        # Reset each layer\n",
    "        self.input_layer[0] = input_data[0]  # Input layer only receives values\n",
    "        self.input_layer[1] = input_data[1]\n",
    "        self.middle_layer[0].reset()\n",
    "        self.middle_layer[1].reset()\n",
    "        self.output_layer[0].reset()\n",
    "\n",
    "        # Input layer -> Middle layer\n",
    "        self.middle_layer[0].set_input(self.input_layer[0] * self.w_im[0][0])\n",
    "        self.middle_layer[0].set_input(self.input_layer[1] * self.w_im[0][1])\n",
    "        self.middle_layer[0].set_input(self.b_m[0])\n",
    "\n",
    "        self.middle_layer[1].set_input(self.input_layer[0] * self.w_im[1][0])\n",
    "        self.middle_layer[1].set_input(self.input_layer[1] * self.w_im[1][1])\n",
    "        self.middle_layer[1].set_input(self.b_m[1])\n",
    "\n",
    "        # Middle layer -> Output layer\n",
    "        self.output_layer[0].set_input(self.middle_layer[0].get_output() * self.w_mo[0][0])\n",
    "        self.output_layer[0].set_input(self.middle_layer[1].get_output() * self.w_mo[0][1])\n",
    "        self.output_layer[0].set_input(self.b_o[0])\n",
    "\n",
    "        return self.output_layer[0].get_output()\n",
    "\n",
    "    def train(self, correct):\n",
    "        # Learning rate\n",
    "        k = 0.3\n",
    "\n",
    "        # Output\n",
    "        output_o = self.output_layer[0].output\n",
    "        output_m0 = self.middle_layer[0].output\n",
    "        output_m1 = self.middle_layer[1].output\n",
    "\n",
    "        # δ (delta)\n",
    "        delta_o = (output_o - correct) * output_o * (1.0 - output_o)\n",
    "\n",
    "        # Update parameters\n",
    "        self.w_mo[0][0] -= k * delta_o * output_m0\n",
    "        self.w_mo[0][1] -= k * delta_o * output_m1\n",
    "        self.b_o[0] -= k * delta_o\n",
    "\n",
    "# Neural network instance\n",
    "neural_network = NeuralNetwork()\n",
    "\n",
    "# Parameter changes due to learning\n",
    "print(\"-------- Before train --------\")\n",
    "print(neural_network.w_im)\n",
    "print(neural_network.w_mo)\n",
    "print(neural_network.b_m)\n",
    "print(neural_network.b_o)\n",
    "neural_network.commit(train_data[0][:2])  # Forward pass\n",
    "neural_network.train(train_data[0][2])  # Backpropagation\n",
    "print(\"-------- After train --------\")\n",
    "print(neural_network.w_im)\n",
    "print(neural_network.w_mo)\n",
    "print(neural_network.b_m)\n",
    "print(neural_network.b_o)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "031a340f-a7f0-4e1e-b238-75165fbac7b0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-ai-2024.04-py310",
   "language": "python",
   "name": "conda-env-anaconda-ai-2024.04-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
